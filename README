SRend
=====
This is a repository in which I put things related to rendering. I'm doing do
by writing pieces of a software renderer.

The idea is to build everything on top of SDL2. One of the reasons is that
I'd like to take this to windows later on and try it out (currently I'm only
on linux).

Programs
========
Each program is identified by having a directory of its own with its own
name.

  => DrawPoints
  =============
  Draws some points across a horizontal line. Extremely simple program merely
  to get on with drawing pixels with SDL2.

  => DrawLine_Bresenham
  =====================
  My first attempt at the Bresenham line drawing algorithm.

  The code was a bit messier, but it was actually cleaner than I expected.
  The largest issue was to make sure it worked for all cases and not just for
  when the line has a positive slope smaller than 1, which was how I learned
  the algorithm. This was largely due to a silly attention mistake (wrote x
  when I should have written y) that took me about half hour to find.

  It was very impressive how much the assertions helped in making the program
  work.

  => DrawCircles_DDA
  ==================
  My first attempt at the digital differential analysis algorithm for drawing
  circles.

  Largely, forgetting to round floating point values to the nearest integer
  value was what got me. The algorithm in general made sense without much of
  a trouble.

  There were some issues around finding that E value the book (Compute Graphics
  via Java) talks about. They were left unresolved. If I ever study
  rasterization algorithms again, which I intend to, I'll have another look at
  this.

  => DrawCircles_Bresenham
  ========================
  My first attempt at the Bresenham's circle drawing algorithm.

  The book (Computer Graphics via Java) mentions this algorithm is much less
  obvious than the line drawing and the digital differential analysis. While I
  don't know exactly what the author of the book meant, I found this algorithm
  much easier to understand than the other two.

  => lib01
  ========
  A first attempt at putting together rendering functions inside a library-ish
  thing. It draws and fills rectangles and circles. It also draw lines. It has
  special versions of line drawing for vertical and horizontal lines.

  This was pretty starightforward to do. This was mostly because the
  potentially tricky algorithms (line and circle drawing) were already
  implemented. The resulting code isn't particularly messy, but it isn't
  specially clean either.

  => lib02
  ========
  An evolution base on lib01. It also inclues srmath.h and srmath.h, which
  contains definitions for letting the user work with matrices and vectors
  2D and also a bit of homogeneous coordinates. It's pretty basic, but it
  allows for some simpler transformations.

  => DrawTriangle
  ===============
  First attempt at a triangle filling algorithm. It's still incomplete and
  it doesn't do as much as I'd like. The idea is based off an algorithm from
  this website: http://joshbeam.com/articles/triangle_rasterization/
  The algorithm in the website uses floating point arithmetic, but I decided to
  try sticking to the discipline of using only integer operations for drawing
  these simpler figures, so I did. It led to an interesting use of fixed point
  arithmetic. I'm not so sure about the performance of this (seems like an
  interesting thing to benchmark).

  => Splines2D
  ============
  Basic splines 2D drawing. I don't think I understood splines well enough
  from the material I'm learning from. I get, though, that it involves
  interpolating points you want in the curve to get the resulting curve. This
  deservers more studying.

XError
======
This code relies on XError. This is a error report handling library for C
programming that I'm currently working on. You can find more on it in here:
https://github.com/phao/XError.
